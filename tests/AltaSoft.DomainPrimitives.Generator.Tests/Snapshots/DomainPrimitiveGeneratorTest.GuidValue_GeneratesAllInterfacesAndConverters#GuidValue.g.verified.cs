//HintName: GuidValue.g.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a AltaSoft.DomainPrimitives.Generator v1.0.0
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System;
using System.Numerics;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Text.Json.Serialization;
using AltaSoft.DomainPrimitives.Converters;
using System.ComponentModel;

namespace AltaSoft.DomainPrimitives;

[JsonConverter(typeof(GuidValueJsonConverter))]
[TypeConverter(typeof(GuidValueTypeConverter))]
[DebuggerDisplay("{_value}")]
public readonly partial struct GuidValue :
		IEquatable<GuidValue>
		, IComparable
		, IComparable<GuidValue>
		, ISpanFormattable
		, IParsable<GuidValue>
#if NET8_0_OR_GREATER
		, IUtf8SpanFormattable
#endif

{
	[DebuggerBrowsable(DebuggerBrowsableState.Never)]
	private readonly Guid _value;
	
	/// <summary>
	/// Initializes a new instance of the <see cref="GuidValue"/> class by validating the specified <see cref="Guid"/> value using <see cref="Validate"/> static method.
	/// </summary>
	/// <param name="value">The value to be validated..</param>
	public GuidValue(Guid value)
	{
			Validate(value);
			_value = value;
	}
	
	/// <inheritdoc/>
	[Obsolete("Domain primitive cannot be created using empty Ctor", true)]
	public GuidValue() : this(Default)
	{
	}
	
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is GuidValue other && Equals(other);
	/// <inheritdoc/>
	public bool Equals(GuidValue other) => _value == other._value;
	/// <inheritdoc/>
	public static bool operator ==(GuidValue left, GuidValue right) => left.Equals(right);
	/// <inheritdoc/>
	public static bool operator !=(GuidValue left, GuidValue right) => !(left == right);

	/// <inheritdoc/>
	public int CompareTo(object? value)
	{
		if (value is null)
			return 1;

		if (value is GuidValue c)
			return CompareTo(c);

		throw new ArgumentException("Object is not a GuidValue", nameof(value));
	}

	/// <inheritdoc/>
	public int CompareTo(GuidValue other) => _value.CompareTo(other._value);

	/// <summary>
	/// Implicit conversion from <see cref = "Guid"/> to <see cref = "GuidValue"/>
	/// </summary>
	public static implicit operator GuidValue(Guid value) => new(value);

	/// <summary>
	/// Implicit conversion from <see cref = "Guid"/> (nullable) to <see cref = "GuidValue"/> (nullable)
	/// </summary>
	[return: NotNullIfNotNull(nameof(value))]
	public static implicit operator GuidValue?(Guid? value) => value is null ? null : new(value.Value);

	/// <summary>
	/// Implicit conversion from <see cref = "GuidValue"/> to <see cref = "Guid"/>
	/// </summary>
	public static implicit operator Guid(GuidValue value) => (Guid)value._value;

	/// <inheritdoc/>
	public static GuidValue Parse(string s, IFormatProvider? provider) => Guid.Parse(s, provider);

	/// <inheritdoc/>
	public static bool TryParse(string? s, IFormatProvider? provider, out GuidValue result)
	{
		if (!Guid.TryParse(s, provider, out var value))
		{
			result = default;
			return false;
		}

		try
		{
			result = new GuidValue(value);
			return true;
		}
		catch (Exception)
		{
			result = default;
			return false;
		}
	}


	/// <inheritdoc/>
	public string ToString(string? format, IFormatProvider? formatProvider) => _value.ToString(format, formatProvider);

	/// <inheritdoc/>
	public bool TryFormat(Span<char> destination, out int charsWritten, ReadOnlySpan<char> format, IFormatProvider? provider)
	{
		return ((ISpanFormattable)_value).TryFormat(destination, out charsWritten, format, provider);
	}


#if NET8_0_OR_GREATER
	/// <inheritdoc cref="IUtf8SpanFormattable.TryFormat"/>
	public bool TryFormat(Span<byte> utf8Destination, out int bytesWritten, ReadOnlySpan<char> format, IFormatProvider? provider)
	{
		return ((IUtf8SpanFormattable)_value).TryFormat(utf8Destination, out bytesWritten, format, provider);
	}
#endif

	/// <inheritdoc/>
	public override int GetHashCode() => _value.GetHashCode();
	/// <inheritdoc/>
	public override string ToString() => _value.ToString();

}
